"""upgrade to r1524

Revision ID: 58097291e8c6
Revises: 216efc659e0d
Create Date: 2013-11-09 00:36:38.884400

"""

# revision identifiers, used by Alembic.
revision = '58097291e8c6'
down_revision = '216efc659e0d'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.rename_table('vaccinetypes','oldvaccinetypes')
    op.create_table('vaccinetypes',
                    sa.Column(u'vaccinetypeId', sa.Integer(), nullable=False),
                    sa.Column(u'DisplayName', sa.String(length=250), nullable=True),
                    sa.Column(u'Abbreviation', sa.String(length=250), nullable=True),
                    sa.Column(u'presentation', sa.String(length=250), nullable=True),
                    sa.Column(u'administration', sa.String(length=250), nullable=True),
                    sa.Column(u'Manufacturer', sa.String(length=250), nullable=True),
                    sa.Column(u'secondaryPackaging', sa.String(length=250), nullable=True),
                    sa.Column(u'dosesPerVial', sa.Integer(), nullable=True),
                    sa.Column(u'volPerDose', sa.Float(), nullable=True),
                    sa.Column(u'diluentVolPerDose', sa.Float(), nullable=True),
                    sa.Column(u'pricePerVial', sa.Float(), nullable=True),
                    sa.Column(u'pricePerDose', sa.Float(), nullable=True),
                    sa.Column(u'priceUnits', sa.String(length=250), nullable=True),
                    sa.Column(u'dosesPerPerson', sa.Integer(), nullable=True),
                    sa.Column(u'freezerLifetime', sa.Float(), nullable=True),
                    sa.Column(u'freezerLifetimeUnits', sa.CHAR(length=1), nullable=True),
                    sa.Column(u'coolerLifetime', sa.Float(), nullable=True),
                    sa.Column(u'coolerLifetimeUnits', sa.CHAR(length=1), nullable=True),
                    sa.Column(u'roomtempLifetime', sa.Float(), nullable=True),
                    sa.Column(u'roomtempLifetimeUnits', sa.CHAR(length=1), nullable=True),
                    sa.Column(u'openLifetime', sa.Float(), nullable=True),
                    sa.Column(u'openLifetimeUnits', sa.CHAR(length=1), nullable=True),
                    sa.Column(u'RandomKey', sa.Integer(), nullable=True),
                    sa.Column(u'Requires', sa.String(length=250), nullable=True),
                    sa.Column(u'Notes', sa.String(length=4096), nullable=True),
                    sa.Column(u'link', sa.String(length=250), nullable=True),
                    sa.ForeignKeyConstraint([u'vaccinetypeId'], ['types.typeId'], ),
                    sa.PrimaryKeyConstraint(u'vaccinetypeId')
                    )
    conn = op.get_bind()
    meta = sa.MetaData()
    oldvaccinetypes = sa.Table('oldvaccinetypes', meta, autoload=True, autoload_with=conn.engine)
    vaccinetypes = sa.Table('vaccinetypes', meta, autoload=True, autoload_with=conn.engine)
    for row in conn.execute( sa.select([oldvaccinetypes]) ):

        days = row[oldvaccinetypes.c.freezerDays]
        months = row[oldvaccinetypes.c.freezerMonths]
        if days is None and months is not None:
            freezerLifetimeUnits = 'M'
            freezerLifetime = months
        else:
            freezerLifetimeUnits = 'D'
            freezerLifetime = days

        days = row[oldvaccinetypes.c.coolerDays]
        months = row[oldvaccinetypes.c.coolerMonths]
        if days is None and months is not None:
            coolerLifetimeUnits = 'M'
            coolerLifetime = months
        else:
            coolerLifetimeUnits = 'D'
            coolerLifetime = days

        days = row[oldvaccinetypes.c.roomtempDays]
        months = row[oldvaccinetypes.c.roomtempMonths]
        if days is None and months is not None:
            roomtempLifetimeUnits = 'M'
            roomtempLifetime = months
        else:
            roomtempLifetimeUnits = 'D'
            roomtempLifetime = days

        days = row[oldvaccinetypes.c.openDays]
        months = row[oldvaccinetypes.c.openMonths]
        if days is None and months is not None:
            openLifetimeUnits = 'M'
            openLifetime = months
        else:
            openLifetimeUnits = 'D'
            openLifetime = days
            
        conn.execute( vaccinetypes.insert().values( vaccinetypeId=row[oldvaccinetypes.c.vaccinetypeId],
                                                    DisplayName=row[oldvaccinetypes.c.DisplayName],
                                                    Abbreviation=row[oldvaccinetypes.c.Abbreviation],
                                                    presentation=row[oldvaccinetypes.c.presentation],
                                                    administration=row[oldvaccinetypes.c.administration],
                                                    Manufacturer=row[oldvaccinetypes.c.Manufacturer],
                                                    secondaryPackaging=row[oldvaccinetypes.c.secondaryPackaging],
                                                    dosesPerVial=row[oldvaccinetypes.c.dosesPerVial],
                                                    volPerDose=row[oldvaccinetypes.c.volPerDose],
                                                    diluentVolPerDose=row[oldvaccinetypes.c.diluentVolPerDose],
                                                    pricePerVial=row[oldvaccinetypes.c.pricePerVial],
                                                    pricePerDose=row[oldvaccinetypes.c.pricePerDose],
                                                    priceUnits=row[oldvaccinetypes.c.priceUnits],
                                                    dosesPerPerson=row[oldvaccinetypes.c.dosesPerPerson],
                                                    freezerLifetime=freezerLifetime,
                                                    freezerLifetimeUnits=freezerLifetimeUnits,
                                                    coolerLifetime=coolerLifetime,
                                                    coolerLifetimeUnits=coolerLifetimeUnits,
                                                    roomtempLifetime=roomtempLifetime,
                                                    roomtempLifetimeUnits=roomtempLifetimeUnits,
                                                    openLifetime=openLifetime,
                                                    openLifetimeUnits=openLifetimeUnits,
                                                    RandomKey=row[oldvaccinetypes.c.RandomKey],
                                                    Requires=row[oldvaccinetypes.c.Requires],
                                                    Notes=row[oldvaccinetypes.c.Notes],
                                                    link=row[oldvaccinetypes.c.link]
                                                    ) )    
    
    op.drop_table('oldvaccinetypes')
          
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###

    op.rename_table('vaccinetypes','oldvaccinetypes')
    op.create_table('vaccinetypes',
                    sa.Column(u'vaccinetypeId', sa.Integer(), nullable=False),
                    sa.Column(u'DisplayName', sa.String(length=250), nullable=True),
                    sa.Column(u'Abbreviation', sa.String(length=250), nullable=True),
                    sa.Column(u'presentation', sa.String(length=250), nullable=True),
                    sa.Column(u'administration', sa.String(length=250), nullable=True),
                    sa.Column(u'Manufacturer', sa.String(length=250), nullable=True),
                    sa.Column(u'secondaryPackaging', sa.String(length=250), nullable=True),
                    sa.Column(u'dosesPerVial', sa.Integer(), nullable=True),
                    sa.Column(u'volPerDose', sa.Float(), nullable=True),
                    sa.Column(u'diluentVolPerDose', sa.Float(), nullable=True),
                    sa.Column(u'pricePerVial', sa.Float(), nullable=True),
                    sa.Column(u'pricePerDose', sa.Float(), nullable=True),
                    sa.Column(u'priceUnits', sa.String(length=250), nullable=True),
                    sa.Column(u'dosesPerPerson', sa.Integer(), nullable=True),
                    sa.Column(u'coolerDays', sa.Float(), nullable=True),
                    sa.Column(u'freezerDays', sa.Float(), nullable=True),
                    sa.Column(u'roomtempDays', sa.Float(), nullable=True),
                    sa.Column(u'openDays', sa.Float(), nullable=True),
                    sa.Column(u'coolerMonths', sa.Float(), nullable=True),
                    sa.Column(u'freezerMonths', sa.Float(), nullable=True),
                    sa.Column(u'openMonths', sa.Float(), nullable=True),
                    sa.Column(u'roomtempMonths', sa.Float(), nullable=True),
                    sa.Column(u'RandomKey', sa.Integer(), nullable=True),
                    sa.Column(u'wastageRate', sa.Float(), nullable=True),
                    sa.Column(u'Requires', sa.String(length=250), nullable=True),
                    sa.Column(u'Notes', sa.String(length=4096), nullable=True),
                    sa.Column(u'link', sa.String(length=250), nullable=True),
                    sa.ForeignKeyConstraint(['vaccinetypeId'], ['types.typeId'], ),
                    sa.PrimaryKeyConstraint('vaccinetypeId')
                    )
    conn = op.get_bind()
    meta = sa.MetaData()
    oldvaccinetypes = sa.Table('oldvaccinetypes', meta, autoload=True, autoload_with=conn.engine)
    vaccinetypes = sa.Table('vaccinetypes', meta, autoload=True, autoload_with=conn.engine)
    for row in conn.execute( sa.select([oldvaccinetypes] ) ):

        k = row[oldvaccinetypes.c.freezerLifetimeUnits]
        if k=='D': 
            freezerLifetimeDays = row[oldvaccinetypes.c.freezerLifetime]
            freezerLifetimeMonths = None
        elif k=='W': 
            freezerLifetimeDays = 7*row[oldvaccinetypes.c.freezerLifetime]
            freezerLifetimeMonths = None
        elif k=='M': 
            freezerLifetimeDays = None
            freezerLifetimeMonths = row[oldvaccinetypes.c.freezerLifetime]
        else: raise RuntimeError('bad time units code in oldvaccinetypes for freezer')

        k = row[oldvaccinetypes.c.coolerLifetimeUnits]
        if k=='D': 
            coolerLifetimeDays = row[oldvaccinetypes.c.coolerLifetime]
            coolerLifetimeMonths = None
        elif k=='W': 
            coolerLifetimeDays = 7*row[oldvaccinetypes.c.coolerLifetime]
            coolerLifetimeMonths = None
        elif k=='M': 
            coolerLifetimeDays = None
            coolerLifetimeMonths = row[oldvaccinetypes.c.coolerLifetime]
        else: raise RuntimeError('bad time units code in oldvaccinetypes for cooler')

        k = row[oldvaccinetypes.c.roomtempLifetimeUnits]
        if k=='D': 
            roomtempLifetimeDays = row[oldvaccinetypes.c.roomtempLifetime]
            roomtempLifetimeMonths = None
        elif k=='W': 
            roomtempLifetimeDays = 7*row[oldvaccinetypes.c.roomtempLifetime]
            roomtempLifetimeMonths = None
        elif k=='M': 
            roomtempLifetimeDays = None
            roomtempLifetimeMonths = row[oldvaccinetypes.c.roomtempLifetime]
        else: raise RuntimeError('bad time units code in oldvaccinetypes for roomtemp')

        k = row[oldvaccinetypes.c.openLifetimeUnits]
        if k=='D': 
            openLifetimeDays = row[oldvaccinetypes.c.openLifetime]
            openLifetimeMonths = None
        elif k=='W': 
            openLifetimeDays = 7*row[oldvaccinetypes.c.openLifetime]
            openLifetimeMonths = None
        elif k=='M': 
            openLifetimeDays = None
            openLifetimeMonths = row[oldvaccinetypes.c.openLifetime]
        else: raise RuntimeError('bad time units code in oldvaccinetypes for open')
        
        conn.execute( vaccinetypes.insert().values( vaccinetypeId=row[oldvaccinetypes.c.vaccinetypeId],
                                                    DisplayName=row[oldvaccinetypes.c.DisplayName],
                                                    Abbreviation=row[oldvaccinetypes.c.Abbreviation],
                                                    presentation=row[oldvaccinetypes.c.presentation],
                                                    administration=row[oldvaccinetypes.c.administration],
                                                    Manufacturer=row[oldvaccinetypes.c.Manufacturer],
                                                    secondaryPackaging=row[oldvaccinetypes.c.secondaryPackaging],
                                                    dosesPerVial=row[oldvaccinetypes.c.dosesPerVial],
                                                    volPerDose=row[oldvaccinetypes.c.volPerDose],
                                                    diluentVolPerDose=row[oldvaccinetypes.c.diluentVolPerDose],
                                                    pricePerVial=row[oldvaccinetypes.c.pricePerVial],
                                                    pricePerDose=row[oldvaccinetypes.c.pricePerDose],
                                                    priceUnits=row[oldvaccinetypes.c.priceUnits],
                                                    dosesPerPerson=row[oldvaccinetypes.c.dosesPerPerson],
                                                    freezerDays=freezerLifetimeDays,
                                                    freezerMonths=freezerLifetimeMonths,
                                                    coolerDays=coolerLifetimeDays,
                                                    coolerMonths=coolerLifetimeMonths,
                                                    roomtempDays=roomtempLifetimeDays,
                                                    roomtempMonths=roomtempLifetimeMonths,
                                                    openDays=openLifetimeDays,
                                                    openMonths=openLifetimeMonths,
                                                    RandomKey=row[oldvaccinetypes.c.RandomKey],
                                                    wastageRate=0.0,
                                                    Requires=row[oldvaccinetypes.c.Requires],
                                                    Notes=row[oldvaccinetypes.c.Notes],
                                                    link=row[oldvaccinetypes.c.link]
                                                    ) )    
    
    op.drop_table('oldvaccinetypes')
    
    ### end Alembic commands ###
