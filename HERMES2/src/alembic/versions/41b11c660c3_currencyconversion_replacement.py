"""currencyconversion replacement

Revision ID: 41b11c660c3
Revises: 10f31c5e5a17
Create Date: 2014-07-09 18:58:37.599012

"""

# revision identifiers, used by Alembic.
revision = '41b11c660c3'
down_revision = '10f31c5e5a17'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
import csv_tools
import os.path
import types

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
#    op.create_index('factoryIdx', 'factories', ['modelId', 'idcode'], unique=False)
#    op.create_index('routesIdxName', 'routes', ['modelId', 'RouteName'], unique=False)
#    op.alter_column('stops', 'isSupplier',
#               existing_type=mysql.TINYINT(display_width=1),
#               type_=sa.Boolean(),
#               existing_nullable=True)
#    op.create_index('stopsIdxId', 'stops', ['modelId', 'idcode'], unique=False)
#    op.create_index('stopsIdxRn', 'stops', ['modelId', 'RouteName'], unique=False)
#    op.create_index('storesIdx', 'stores', ['modelId', 'idcode'], unique=False)
#    op.create_index('typesIdx', 'types', ['modelId', 'Name'], unique=False)

    here = os.path.split(os.path.abspath(__file__))[0]
    with open(os.path.join(here,'..','..','..','master_data','unified','CurrencyConversionTable.csv'),'rU') as f:
        keys,recs = csv_tools.parseCSV(f)
    #print keys
    yearList = []
    for k in keys:
        year = None
        try:
            yearList.append(int(k))
        except:
            pass
    #print yearList
    conn = op.get_bind()
    meta = sa.MetaData()
    models = sa.Table('models', meta, autoload=True, autoload_with=conn.engine)
    currencyConversion = sa.Table('currencyConversion', meta, autoload=True, autoload_with=conn.engine)
    idList = []
    for row in conn.execute(sa.select([models])):
        idList.append(row[models.c.modelId])
        #modelName = row[models.c.name]
    #print idList
    recsToInsert = []
    for rec in recs:
        for k in rec.keys():
            if type(rec[k]) == types.StringType: rec[k] = rec[k]#rec[k].decode('utf8')
        for year in yearList:
            for id in idList:
                val = rec[str(year)]
                if val is not None and val!='':
                    recsToInsert.append({'modelId':id, 'country':rec['Country Name'],
                                         'currency':rec['Currency Name'], 'code':rec['Currency Code'].strip(),
                                         'year':year, 'value':val,'Notes':rec['Notes']})
    #for r in recsToInsert:
    #    print r
    op.execute(currencyConversion.delete())
    op.bulk_insert(currencyConversion, recsToInsert)
    
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
#    op.drop_index('typesIdx', table_name='types')
#    op.drop_index('storesIdx', table_name='stores')
#    op.drop_index('stopsIdxRn', table_name='stops')
#    op.drop_index('stopsIdxId', table_name='stops')
#    op.alter_column('stops', 'isSupplier',
#               existing_type=sa.Boolean(),
#               type_=mysql.TINYINT(display_width=1),
#               existing_nullable=True)
#    op.drop_index('routesIdxName', table_name='routes')
#    op.drop_index('factoryIdx', table_name='factories')

    pass
    ### end Alembic commands ###
