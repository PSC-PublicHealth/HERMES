"""costing for vax and trucks

Revision ID: 27a7bae2b85e
Revises: 2647c0b31065
Create Date: 2014-10-14 12:49:21.992291

"""

# revision identifiers, used by Alembic.
revision = '27a7bae2b85e'
down_revision = '2647c0b31065'

from alembic import op
import sqlalchemy as sa
import csv_tools
import os, types

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    meta = sa.MetaData()
    
    # Insert the currency conversion value for SEK for 2000
    print "###### Inserting currency conversion factors for SEK for 2000 and 2001"
    here = os.path.split(os.path.abspath(__file__))[0]
    with open(os.path.join(here,'..','..','..','master_data','unified','CurrencyConversionTable.csv'),'rU') as f:
        keys,recs = csv_tools.parseCSV(f)
    val2000 = None
    for v in [r[u'2000'] for r in recs if r[u'Currency Code'].strip()==u'SEK']:
        if isinstance(v,types.FloatType):
            val2000 = v
            break
    if val2000 is None:
        raise RuntimeError('Cannot find the currency conversion factor for SEC in 2000!')
    val2001 = None
    for v in [r[u'2001'] for r in recs if r[u'Currency Code'].strip()==u'SEK']:
        if isinstance(v,types.FloatType):
            val2001 = v
            break
    if val2001 is None:
        raise RuntimeError('Cannot find the currency conversion factor for SEC in 2001!')
        
    currencyConversion = sa.Table('currencyConversion', meta, autoload=True, autoload_with=conn.engine)
    
    rows = conn.execute(sa.select([currencyConversion]).where(currencyConversion.c.code=='SEK')
                        .where(currencyConversion.c.year==2002)).fetchall()
    modelIds = []
    for r in rows: modelIds.append(r['modelId'])

    for id in modelIds:
        conn.execute(currencyConversion.insert().values(modelId=id,
                                                        country=u'Sweden',
                                                        currency=u'swedish kroner',
                                                        code=u'SEK',
                                                        year=2000,
                                                        value=val2000,
                                                        Notes=u''))
        conn.execute(currencyConversion.insert().values(modelId=id,
                                                        country=u'Sweden',
                                                        currency=u'swedish kroner',
                                                        code=u'SEK',
                                                        year=2001,
                                                        value=val2001,
                                                        Notes=u''))
        
    print "###### Creating upgraded vaccine table"
    vaccinetypes = sa.Table('vaccinetypes', meta, autoload=True, autoload_with=conn.engine)
    newVaccinetypes = sa.Table('newVaccinetypes', meta,
        sa.Column('vaccinetypeId', sa.Integer(), nullable=False),
        sa.Column('DisplayName', sa.String(length=250), nullable=True),
        sa.Column('Abbreviation', sa.String(length=250), nullable=True),
        sa.Column('presentation', sa.String(length=250), nullable=True),
        sa.Column('administration', sa.String(length=250), nullable=True),
        sa.Column('Manufacturer', sa.String(length=250), nullable=True),
        sa.Column('secondaryPackaging', sa.String(length=250), nullable=True),
        sa.Column('dosesPerVial', sa.Integer(), nullable=True),
        sa.Column('volPerDose', sa.Float(), nullable=True),
        sa.Column('diluentVolPerDose', sa.Float(), nullable=True),
        sa.Column('pricePerVial', sa.Float(), nullable=True),
        sa.Column('pricePerDose', sa.Float(), nullable=True),
        sa.Column('priceUnits', sa.String(length=250), nullable=True),
        sa.Column('priceBaseYear', sa.Integer(), nullable=True),
        sa.Column('dosesPerPerson', sa.Integer(), nullable=True),
        sa.Column('freezerLifetime', sa.Float(), nullable=True),
        sa.Column('freezerLifetimeUnits', sa.CHAR(length=1), nullable=True),
        sa.Column('coolerLifetime', sa.Float(), nullable=True),
        sa.Column('coolerLifetimeUnits', sa.CHAR(length=1), nullable=True),
        sa.Column('roomtempLifetime', sa.Float(), nullable=True),
        sa.Column('roomtempLifetimeUnits', sa.CHAR(length=1), nullable=True),
        sa.Column('openLifetime', sa.Float(), nullable=True),
        sa.Column('openLifetimeUnits', sa.CHAR(length=1), nullable=True),
        sa.Column('RandomKey', sa.Integer(), nullable=True),
        sa.Column('Requires', sa.String(length=250), nullable=True),
        sa.Column('Notes', sa.String(length=4096), nullable=True),
        sa.Column('link', sa.String(length=250), nullable=True),
        sa.ForeignKeyConstraint(['vaccinetypeId'], ['types.typeId'], ),
        sa.PrimaryKeyConstraint('vaccinetypeId')
        )
    newVaccinetypes.create(conn, checkfirst=True)
    
    print "###### Copying vaccine records"   
    rows = conn.execute(sa.select([vaccinetypes])).fetchall()
    for i in range(len(rows)):
        row = rows[i]
        try:
            conn.execute( newVaccinetypes.insert().values( vaccinetypeId=row[vaccinetypes.c.vaccinetypeId],
                                                           DisplayName=row[vaccinetypes.c.DisplayName],
                                                           Abbreviation=row[vaccinetypes.c.Abbreviation],
                                                           presentation=row[vaccinetypes.c.presentation],
                                                           administration=row[vaccinetypes.c.administration],
                                                           Manufacturer=row[vaccinetypes.c.Manufacturer],
                                                           secondaryPackaging=row[vaccinetypes.c.secondaryPackaging],
                                                           dosesPerVial=row[vaccinetypes.c.dosesPerVial],
                                                           volPerDose=row[vaccinetypes.c.volPerDose],
                                                           diluentVolPerDose=row[vaccinetypes.c.diluentVolPerDose],
                                                           pricePerVial=row[vaccinetypes.c.pricePerVial],
                                                           pricePerDose=row[vaccinetypes.c.pricePerDose],
                                                           priceUnits=row[vaccinetypes.c.priceUnits],
                                                           priceBaseYear=None,
                                                           dosesPerPerson=row[vaccinetypes.c.dosesPerPerson],
                                                           freezerLifetime=row[vaccinetypes.c.freezerLifetime],
                                                           freezerLifetimeUnits=row[vaccinetypes.c.freezerLifetimeUnits],
                                                           coolerLifetime=row[vaccinetypes.c.coolerLifetime],
                                                           coolerLifetimeUnits=row[vaccinetypes.c.coolerLifetimeUnits],
                                                           roomtempLifetime=row[vaccinetypes.c.roomtempLifetime],
                                                           roomtempLifetimeUnits=row[vaccinetypes.c.roomtempLifetimeUnits],
                                                           openLifetime=row[vaccinetypes.c.openLifetime],
                                                           openLifetimeUnits=row[vaccinetypes.c.openLifetimeUnits],
                                                           RandomKey=row[vaccinetypes.c.RandomKey],
                                                           Requires=row[vaccinetypes.c.Requires],
                                                           Notes=row[vaccinetypes.c.Notes],
                                                           link=row[vaccinetypes.c.link]
                                                           ))
        except Exception,e:
            print 'dropping bad record on error: %s'%str(e)
            rows = conn.execute(sa.select([vaccinetypes])).fetchall()
    
    
    print "###### Swapping in new vaccine table"

    op.rename_table('vaccinetypes', 'oldVaccinetypes')
    op.rename_table('newVaccinetypes', 'vaccinetypes')
    op.drop_table('oldVaccinetypes')
        
    print "###### Creating upgraded truck table"
    trucktypes = sa.Table('trucktypes', meta, autoload=True, autoload_with=conn.engine)
    newTrucktypes = sa.Table('newTrucktypes', meta,
        sa.Column('trucktypeId', sa.Integer(), nullable=False),
        sa.Column('DisplayName', sa.String(length=250), nullable=True),
        sa.Column('CoolVolumeCC', sa.Float(), nullable=True),
        sa.Column('Storage', sa.String(length=250), nullable=True),
        sa.Column('Requires', sa.String(length=250), nullable=True),
        sa.Column('BaseCost', sa.Float(), nullable=True),
        sa.Column('BaseCostCurCode', sa.String(length=250), nullable=True),
        sa.Column('BaseCostYear', sa.Integer(), nullable=True),
        sa.Column('AmortizationKm', sa.Float(), nullable=True),
        sa.Column('Fuel', sa.String(length=250), nullable=True),
        sa.Column('FuelRate', sa.Float(), nullable=True),
        sa.Column('FuelRateUnits', sa.String(length=250), nullable=True),
        sa.Column('Notes', sa.String(length=4096), nullable=True),
        sa.ForeignKeyConstraint(['trucktypeId'], ['types.typeId'], ),
        sa.PrimaryKeyConstraint('trucktypeId')
        )
    newTrucktypes.create(conn, checkfirst=True)
    
    print "###### Copying truck records"   
    rows = conn.execute(sa.select([trucktypes])).fetchall()
    for i in range(len(rows)):
        row = rows[i]
        try:
            conn.execute( newTrucktypes.insert().values( trucktypeId=row[trucktypes.c.trucktypeId],
                                                           DisplayName=row[trucktypes.c.DisplayName],
                                                           CoolVolumeCC=row[trucktypes.c.CoolVolumeCC],
                                                           Storage=row[trucktypes.c.Storage],
                                                           Requires=row[trucktypes.c.Requires],
                                                           BaseCost=None,
                                                           BaseCostCurCode=None,
                                                           BaseCostYear=None,
                                                           AmortizationKm=None,
                                                           Fuel=None,
                                                           FuelRate=None,
                                                           FuelRateUnits=None,
                                                           Notes=row[trucktypes.c.Notes]
                                                           ))
        except Exception,e:
            print 'dropping bad record on error: %s'%str(e)
            rows = conn.execute(sa.select([trucktypes])).fetchall()
    
    
    print "###### Swapping in new truck table"

    op.rename_table('trucktypes', 'oldTrucktypes')
    op.rename_table('newTrucktypes', 'trucktypes')
    op.drop_table('oldTrucktypes')
        
    print "####### done"

    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###

    conn = op.get_bind()
    meta = sa.MetaData()
    
    print '###### Removing SEK 2000 and 2001 from currencyConversion'
    currencyConversion = sa.Table('currencyConversion', meta, autoload=True, autoload_with=conn.engine)
    
    conn.execute(currencyConversion.delete().where(currencyConversion.c.code=='SEK').where(currencyConversion.c.year==2000))
    conn.execute(currencyConversion.delete().where(currencyConversion.c.code=='SEK').where(currencyConversion.c.year==2001))

    print "###### Creating downgraded vaccine table"
    vaccinetypes = sa.Table('vaccinetypes', meta, autoload=True, autoload_with=conn.engine)
    newVaccinetypes = sa.Table('newVaccinetypes', meta,
        sa.Column('vaccinetypeId', sa.Integer(), nullable=False),
        sa.Column('DisplayName', sa.String(length=250), nullable=True),
        sa.Column('Abbreviation', sa.String(length=250), nullable=True),
        sa.Column('presentation', sa.String(length=250), nullable=True),
        sa.Column('administration', sa.String(length=250), nullable=True),
        sa.Column('Manufacturer', sa.String(length=250), nullable=True),
        sa.Column('secondaryPackaging', sa.String(length=250), nullable=True),
        sa.Column('dosesPerVial', sa.Integer(), nullable=True),
        sa.Column('volPerDose', sa.Float(), nullable=True),
        sa.Column('diluentVolPerDose', sa.Float(), nullable=True),
        sa.Column('pricePerVial', sa.Float(), nullable=True),
        sa.Column('pricePerDose', sa.Float(), nullable=True),
        sa.Column('priceUnits', sa.String(length=250), nullable=True),
        sa.Column('dosesPerPerson', sa.Integer(), nullable=True),
        sa.Column('freezerLifetime', sa.Float(), nullable=True),
        sa.Column('freezerLifetimeUnits', sa.String(length=250), nullable=True),
        sa.Column('coolerLifetime', sa.Float(), nullable=True),
        sa.Column('coolerLifetimeUnits', sa.String(length=250), nullable=True),
        sa.Column('roomtempLifetime', sa.Float(), nullable=True),
        sa.Column('roomtempLifetimeUnits', sa.String(length=250), nullable=True),
        sa.Column('openLifetime', sa.Float(), nullable=True),
        sa.Column('openLifetimeUnits', sa.String(length=250), nullable=True),
        sa.Column('RandomKey', sa.Integer(), nullable=True),
        sa.Column('Requires', sa.String(length=250), nullable=True),
        sa.Column('Notes', sa.String(length=4096), nullable=True),
        sa.Column('link', sa.String(length=250), nullable=True),
        sa.ForeignKeyConstraint(['vaccinetypeId'], ['types.typeId'], ),
        sa.PrimaryKeyConstraint('vaccinetypeId')
        )
    newVaccinetypes.create(conn, checkfirst=True)
    
    print "###### Copying vaccine records"   
    rows = conn.execute(sa.select([vaccinetypes])).fetchall()
    for i in range(len(rows)):
        row = rows[i]
        try:
            conn.execute( newVaccinetypes.insert().values( vaccinetypeId=row[vaccinetypes.c.vaccinetypeId],
                                                           DisplayName=row[vaccinetypes.c.DisplayName],
                                                           Abbreviation=row[vaccinetypes.c.Abbreviation],
                                                           presentation=row[vaccinetypes.c.presentation],
                                                           administration=row[vaccinetypes.c.administration],
                                                           Manufacturer=row[vaccinetypes.c.Manufacturer],
                                                           secondaryPackaging=row[vaccinetypes.c.secondaryPackaging],
                                                           dosesPerVial=row[vaccinetypes.c.dosesPerVial],
                                                           volPerDose=row[vaccinetypes.c.volPerDose],
                                                           diluentVolPerDose=row[vaccinetypes.c.diluentVolPerDose],
                                                           pricePerVial=row[vaccinetypes.c.pricePerVial],
                                                           pricePerDose=row[vaccinetypes.c.pricePerDose],
                                                           priceUnits=row[vaccinetypes.c.priceUnits],
                                                           dosesPerPerson=row[vaccinetypes.c.dosesPerPerson],
                                                           freezerLifetime=row[vaccinetypes.c.freezerLifetime],
                                                           freezerLifetimeUnits=row[vaccinetypes.c.freezerLifetimeUnits],
                                                           coolerLifetime=row[vaccinetypes.c.coolerLifetime],
                                                           coolerLifetimeUnits=row[vaccinetypes.c.coolerLifetimeUnits],
                                                           roomtempLifetime=row[vaccinetypes.c.roomtempLifetime],
                                                           roomtempLifetimeUnits=row[vaccinetypes.c.roomtempLifetimeUnits],
                                                           openLifetime=row[vaccinetypes.c.openLifetime],
                                                           openLifetimeUnits=row[vaccinetypes.c.openLifetimeUnits],
                                                           RandomKey=row[vaccinetypes.c.RandomKey],
                                                           Requires=row[vaccinetypes.c.Requires],
                                                           Notes=row[vaccinetypes.c.Notes],
                                                           link=row[vaccinetypes.c.link]
                                                           ))
        except Exception,e:
            print 'dropping bad record on error: %s'%str(e)
            rows = conn.execute(sa.select([vaccinetypes])).fetchall()
    
    
    print "###### Swapping in new vaccine table"

    op.rename_table('vaccinetypes', 'oldNewVaccinetypes')
    op.rename_table('newVaccinetypes', 'vaccinetypes')
    op.drop_table('oldNewVaccinetypes')
        
    print "###### Creating downgraded truck table"
    trucktypes = sa.Table('trucktypes', meta, autoload=True, autoload_with=conn.engine)
    newTrucktypes = sa.Table('newTrucktypes', meta,
        sa.Column('trucktypeId', sa.Integer(), nullable=False),
        sa.Column('DisplayName', sa.String(length=250), nullable=True),
        sa.Column('CoolVolumeCC', sa.Float(), nullable=True),
        sa.Column('Storage', sa.String(length=250), nullable=True),
        sa.Column('Requires', sa.String(length=250), nullable=True),
        sa.Column('Notes', sa.String(length=4096), nullable=True),
        sa.ForeignKeyConstraint(['trucktypeId'], ['types.typeId'], ),
        sa.PrimaryKeyConstraint('trucktypeId')
        )
    newTrucktypes.create(conn, checkfirst=True)
    
    print "###### Copying truck records"   
    rows = conn.execute(sa.select([trucktypes])).fetchall()
    for i in range(len(rows)):
        row = rows[i]
        try:
            conn.execute( newTrucktypes.insert().values( trucktypeId=row[trucktypes.c.trucktypeId],
                                                           DisplayName=row[trucktypes.c.DisplayName],
                                                           CoolVolumeCC=row[trucktypes.c.CoolVolumeCC],
                                                           Storage=row[trucktypes.c.Storage],
                                                           Requires=row[trucktypes.c.Requires],
                                                           Notes=row[trucktypes.c.Notes]
                                                           ))
        except Exception,e:
            print 'dropping bad record on error: %s'%str(e)
            rows = conn.execute(sa.select([vaccinetypes])).fetchall()
    
    
    print "###### Swapping in new truck table"

    op.rename_table('trucktypes', 'oldNewTrucktypes')
    op.rename_table('newTrucktypes', 'trucktypes')
    op.drop_table('oldNewTrucktypes')

    ### end Alembic commands ###
