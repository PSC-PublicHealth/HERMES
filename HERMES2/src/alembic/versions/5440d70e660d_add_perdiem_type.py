"""add PerDiem type

Revision ID: 5440d70e660d
Revises: 1fec4c783c55
Create Date: 2014-11-24 18:04:21.051059

"""

# revision identifiers, used by Alembic.
revision = '5440d70e660d'
down_revision = '1fec4c783c55'

from alembic import op
import sqlalchemy as sa
import csv_tools
import os.path
import types

def copyTableRecords(inTable, outTable, conn, defaultVal=None):
    oldKeys = [c.name for c in inTable.columns]
    newKeys = [c.name for c in outTable.columns]
    rows = conn.execute(sa.select([inTable])).fetchall()
    for i in range(len(rows)):
        row = rows[i]
        try:
            newRow = {}
            for k in newKeys:
                if k in oldKeys:
                    newRow[k] = row[k]
                else:
                    newRow[k] = defaultVal
            # print newRow
            conn.execute(outTable.insert(), newRow)
        except Exception, e:
            print 'dropping bad record on error: %s' % str(e)
            rows = conn.execute(sa.select([inTable])).fetchall()

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###

    print '##### creating perdiemtypes table #####'
    op.create_table('perdiemtypes',
                    sa.Column('perdiemtypeId', sa.Integer(), nullable=False),
                    sa.Column('DisplayName', sa.String(length=250), nullable=True),
                    sa.Column('ClassName', sa.String(length=250), nullable=True),
                    sa.Column('SortOrder', sa.Integer(), nullable=True),
                    sa.Column('BaseAmount', sa.Float(), nullable=True),
                    sa.Column('BaseAmountCurCode', sa.String(length=250), nullable=True),
                    sa.Column('BaseAmountYear', sa.Integer(), nullable=True),
                    sa.Column('MustBeOvernight', sa.Boolean(), nullable=True),
                    sa.Column('CountFirstDay', sa.Boolean(), nullable=True),
                    sa.Column('MinKmHome', sa.Float(), nullable=True),
                    sa.Column('Notes', sa.String(length=4096), nullable=True),
                    sa.ForeignKeyConstraint(['perdiemtypeId'], ['types.typeId'], ),
                    sa.PrimaryKeyConstraint('perdiemtypeId')
                    )

    conn = op.get_bind()
    meta = sa.MetaData()

    print '##### finding AllTypesModel #####'
    models = sa.Table('models', meta, autoload=True, autoload_with=conn.engine)
    typeTable = sa.Table('types', meta, autoload=True, autoload_with=conn.engine)
    perdiemtypes = sa.Table('perdiemtypes', meta, autoload=True, autoload_with=conn.engine)
    allTypesModelId = None
    for row in conn.execute(sa.select([models]).where(models.c.name==op.inline_literal('AllTypesModel'))):
        allTypesModelId = row[models.c.modelId]

    assert allTypesModelId is not None, "Failed to find allTypesModelId"

    print '##### loading perDiemTypeInfo #####'
    here = os.path.split(os.path.abspath(__file__))[0]
    with open(os.path.join(here, '..', '..', '..', 'master_data',
                           'standardtypes', 'perDiemTypeInfo.csv'), 'rU') as f:
        keys, recs = csv_tools.parseCSV(f)  # @UnusedVariable

    print '##### inserting standard types #####'
    for rec in recs:
        # print rec['Name']
        for k in ['DisplayName', 'ClassName', 'SortOrder',
                  'BaseAmount', 'BaseAmountCur', 'BaseAmountYear',
                  'MustBeOvernight', 'CountFirstDay', 'MinKmHome', 'Notes']:
            if rec[k] == '':
                rec[k] = None
        for k, v in rec.items():
            if isinstance(v, types.StringType):
                rec[k] = v.decode('utf8')
        for k in ['CountFirstDay', 'MustBeOvernight']:
            if rec[k].lower() in ['false','f','0']:
                rec[k] = False
            else:
                rec[k] = True

        result = conn.execute(typeTable.insert().values(typeClass='perdiems',
                                                        modelId=allTypesModelId,
                                                        Name=rec['Name']))
        conn.execute(perdiemtypes.insert().values(perdiemtypeId=result.inserted_primary_key[0],
                                                  DisplayName=rec['DisplayName'],
                                                  ClassName=rec['ClassName'],
                                                  SortOrder=rec['SortOrder'],
                                                  BaseAmount=rec['BaseAmount'],
                                                  BaseAmountCurCode=rec['BaseAmountCur'],
                                                  BaseAmountYear=rec['BaseAmountYear'],
                                                  MustBeOvernight=rec['MustBeOvernight'],
                                                  CountFirstDay=rec['CountFirstDay'],
                                                  MinKmHome=rec['MinKmHome'],
                                                  Notes=rec['Notes']
                                                  )
                     )



    print '##### creating new routes table #####'
    op.create_table('newroutes',
        sa.Column('routeId', sa.Integer(), nullable=False),
        sa.Column('modelId', sa.Integer(), nullable=True),
        sa.Column('RouteName', sa.String(length=250), nullable=True),
        sa.Column('Type', sa.String(length=250), nullable=True),
        sa.Column('TruckType', sa.String(length=250), nullable=True),
        sa.Column('PerDiemType', sa.String(length=250), nullable=True),
        sa.Column('ShipIntervalDays', sa.Float(), nullable=True),
        sa.Column('ShipLatencyDays', sa.Float(), nullable=True),
        sa.Column('Conditions', sa.String(length=250), nullable=True),
        sa.Column('PickupDelayFrequency',sa.Float(),nullable=True),
        sa.Column('PickupDelayMagnitude',sa.Float(),nullable=True),
        sa.Column('PickupDelaySigma',sa.Float(),nullable=True),
        sa.ForeignKeyConstraint(['modelId'], ['models.modelId'], ),
        sa.PrimaryKeyConstraint('routeId')
        )

    print '##### transcribing routes records #####'
    routes = sa.Table('routes', meta, autoload=True, autoload_with=conn.engine)
    newroutes = sa.Table('newroutes', meta, autoload=True,
                         autoload_with=conn.engine)
    copyTableRecords(routes, newroutes, conn)

    print '##### swapping routes tables #####'
    op.rename_table('routes', 'oldroutes')
    op.rename_table('newroutes', 'routes')
    op.drop_table('oldroutes')

    print '##### done #####'
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    meta = sa.MetaData()

    print '##### creating downgraded routes table #####'
    op.create_table('newroutes',
        sa.Column('routeId', sa.Integer(), nullable=False),
        sa.Column('modelId', sa.Integer(), nullable=True),
        sa.Column('RouteName', sa.String(length=250), nullable=True),
        sa.Column('Type', sa.String(length=250), nullable=True),
        sa.Column('TruckType', sa.String(length=250), nullable=True),
        sa.Column('ShipIntervalDays', sa.Float(), nullable=True),
        sa.Column('ShipLatencyDays', sa.Float(), nullable=True),
        sa.Column('Conditions', sa.String(length=250), nullable=True),
        sa.Column('PickupDelayFrequency',sa.Float(),nullable=True),
        sa.Column('PickupDelayMagnitude',sa.Float(),nullable=True),
        sa.Column('PickupDelaySigma',sa.Float(),nullable=True),
        sa.ForeignKeyConstraint(['modelId'], ['models.modelId'], ),
        sa.PrimaryKeyConstraint('routeId')
        )

    print '##### transcribing routes records #####'
    routes = sa.Table('routes', meta, autoload=True, autoload_with=conn.engine)
    newroutes = sa.Table('newroutes', meta, autoload=True,
                         autoload_with=conn.engine)
    copyTableRecords(routes, newroutes, conn)

    print '##### swapping routes tables #####'
    op.rename_table('routes', 'oldroutes')
    op.rename_table('newroutes', 'routes')
    op.drop_table('oldroutes')

    print '##### dropping perdiem table #####'
    op.drop_table('perdiemtypes')
    print '##### done #####'
    ### end Alembic commands ###
